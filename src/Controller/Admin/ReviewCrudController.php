<?php

namespace App\Controller\Admin;

use App\Entity\Review;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\DomCrawler\Field\FormField;
use Symfony\Component\HttpFoundation\Response;
use function PHPUnit\Framework\throwException;

class ReviewCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Review::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        return parent::configureActions(
            $actions
                ->setPermission(Action::EDIT, "ROLE_USER")
                ->setPermission(Action::DELETE, "ROLE_USER")
                ->disable(Action::NEW)
                ->update(Crud::PAGE_INDEX, Action::EDIT, function (Action $action){
                    return $action->setLabel('Editar');
                })
                ->update(Crud::PAGE_INDEX, Action::DELETE, function (Action $action){
                    return $action->setLabel('Eliminar');
                })
                ->add(Crud::PAGE_INDEX, Action::DETAIL)
                ->update(Crud::PAGE_INDEX, Action::DETAIL, function (Action $action){
                    return $action->setLabel('Detalle');
                }));
    }

    /**public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $queryBuilder = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);

        if ($this->isGranted('ROLE_ADMIN')) {
            $queryBuilder = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);
        } else {
            $queryBuilder
                ->join('entity.user', 'u')
                ->andWhere('u.id = '.$this->getUser()->getId())
            ;
        }

        return $queryBuilder;
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $user = $this->getUser();
        $entityInstance->setUser($user);

        $review = $this->getDoctrine()->getRepository(Review::class)->findOneBy(['user' => $user, 'film' => $entityInstance->getFilm()]);

        if ($review) {
            $review
                ->setDescription($entityInstance->getDescription())
                ->setContent($entityInstance->getContent())
                ->setRating($entityInstance->getRating())
            ;
            $entityManager->flush();

            $entityInstance = $review;
        }

        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }**/


    public function configureFields(string $pageName): iterable
    {

        if (Crud::PAGE_NEW === $pageName || Crud::PAGE_DETAIL === $pageName){
            yield TextField::new('description', 'Título');
            yield TextareaField::new('content', 'Contenido');
            yield NumberField::new('rating', 'Puntuación');
            yield AssociationField::new('film', 'Pelicula')->setRequired(true);
        }

        if (Crud::PAGE_EDIT === $pageName){
            yield TextField::new('description', 'Título');
            yield TextareaField::new('content', 'Contenido');
            yield NumberField::new('rating', 'Puntuación');
            yield AssociationField::new('film', 'Pelicula')->setRequired(true);
        }

        if(Crud::PAGE_INDEX === $pageName){
            yield TextField::new('description', 'Título');
            yield NumberField::new('rating', 'Puntuación');
            yield AssociationField::new('film', 'Pelicula');
        }

    }

}
